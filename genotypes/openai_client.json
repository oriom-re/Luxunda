{
  "genesis": {
    "name": "openai_client",
    "type": "client_soul",
    "description": "OpenAI API client with advanced capabilities",
    "version": "1.0.0",
    "created_at": "2025-01-30T10:00:00Z",
    "creation_method": "json_genotype"
  },
  "version": "1.0.0",
  "language": "python",
  "python_version": "3.8+",
  "capabilities": {
    "has_init": true,
    "has_execute": true,
    "function_count": 3,
    "public_function_count": 3,
    "private_function_count": 0,
    "attribute_count": 3
  },
  "module_source": "import asyncio\nimport json\nfrom typing import Dict, Any, Optional\n\n# Module attributes\napi_key = None\nmodel = \"gpt-4\"\nmax_tokens = 1000\n\nasync def init(being_context: Dict[str, Any] = None) -> Dict[str, Any]:\n    \"\"\"Initialize OpenAI client with configuration\"\"\"\n    global api_key, model, max_tokens\n    \n    if being_context:\n        # Extract configuration from being context\n        data = being_context.get('data', {})\n        api_key = data.get('api_key', api_key)\n        model = data.get('model', model)\n        max_tokens = data.get('max_tokens', max_tokens)\n    \n    return {\n        \"initialized\": True,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"has_api_key\": api_key is not None,\n        \"message\": \"OpenAI client initialized successfully\"\n    }\n\nasync def chat_completion(prompt: str, being_context: Dict[str, Any] = None) -> Dict[str, Any]:\n    \"\"\"Generate chat completion using OpenAI API\"\"\"\n    if not api_key:\n        return {\n            \"error\": \"API key not configured\",\n            \"success\": False\n        }\n    \n    # Simulate OpenAI API call\n    response_text = f\"AI Response to: {prompt[:50]}...\"\n    \n    return {\n        \"success\": True,\n        \"response\": response_text,\n        \"model_used\": model,\n        \"tokens_used\": len(prompt) + len(response_text),\n        \"prompt\": prompt\n    }\n\ndef get_status() -> Dict[str, Any]:\n    \"\"\"Get current client status and configuration\"\"\"\n    return {\n        \"api_key_configured\": api_key is not None,\n        \"current_model\": model,\n        \"max_tokens\": max_tokens,\n        \"status\": \"active\" if api_key else \"not_configured\"\n    }\n\nasync def execute(data: Dict[str, Any] = None, **kwargs) -> Dict[str, Any]:\n    \"\"\"Default execute function - intelligent chat completion\"\"\"\n    if not data:\n        return await get_status()\n    \n    prompt = data.get('prompt')\n    if prompt:\n        return await chat_completion(prompt, being_context=kwargs.get('being_context'))\n    \n    return {\n        \"error\": \"No prompt provided\",\n        \"available_functions\": [\"chat_completion\", \"get_status\"],\n        \"usage\": \"Provide 'prompt' in data to generate completion\"\n    }",
  "attributes": {
    "api_key": {
      "py_type": "NoneType",
      "default": null,
      "description": "Module attribute api_key of type NoneType",
      "is_optional": true,
      "is_mutable": true,
      "is_constant": false,
      "size": null
    },
    "model": {
      "py_type": "str",
      "default": "gpt-4",
      "description": "Module attribute model of type str",
      "is_optional": false,
      "is_mutable": true,
      "is_constant": false,
      "size": 6
    },
    "max_tokens": {
      "py_type": "int",
      "default": 1000,
      "description": "Module attribute max_tokens of type int",
      "is_optional": false,
      "is_mutable": true,
      "is_constant": false,
      "size": null
    }
  },
  "functions": {
    "init": {
      "py_type": "function",
      "description": "Initialize OpenAI client with configuration",
      "is_async": true,
      "is_coroutine": true,
      "signature": {
        "parameters": {
          "being_context": {
            "type": "typing.Dict[str, typing.Any]",
            "default": "None",
            "required": false,
            "kind": "POSITIONAL_OR_KEYWORD"
          }
        },
        "return_type": "typing.Dict[str, typing.Any]"
      }
    },
    "chat_completion": {
      "py_type": "function",
      "description": "Generate chat completion using OpenAI API",
      "is_async": true,
      "is_coroutine": true,
      "signature": {
        "parameters": {
          "prompt": {
            "type": "<class 'str'>",
            "default": "None",
            "required": true,
            "kind": "POSITIONAL_OR_KEYWORD"
          },
          "being_context": {
            "type": "typing.Dict[str, typing.Any]",
            "default": "None",
            "required": false,
            "kind": "POSITIONAL_OR_KEYWORD"
          }
        },
        "return_type": "typing.Dict[str, typing.Any]"
      }
    },
    "get_status": {
      "py_type": "function",
      "description": "Get current client status and configuration",
      "is_async": false,
      "is_coroutine": false,
      "signature": {
        "parameters": {},
        "return_type": "typing.Dict[str, typing.Any]"
      }
    },
    "execute": {
      "py_type": "function",
      "description": "Default execute function - intelligent chat completion",
      "is_async": true,
      "is_coroutine": true,
      "signature": {
        "parameters": {
          "data": {
            "type": "typing.Dict[str, typing.Any]",
            "default": "None",
            "required": false,
            "kind": "POSITIONAL_OR_KEYWORD"
          }
        },
        "return_type": "typing.Dict[str, typing.Any]"
      }
    }
  }
}